import requests
import re
import random
import wikipedia
import unicodedata as ud

http = requests.Session()

def currency(her, m):
    url = "https://query.yahooapis.com/v1/public/yql?q=" \
          "select+*+from+yahoo.finance.xchange+where+pair+=+%22USDRUB,EURRUB%22&format=json&env=store%3A%2F%2Fdatatables.org%2Falltableswithkeys"
    res = http.get(url).json()
    rates = res["query"]["results"]["rate"]
    text = ", ".join(["{Name} {Rate}".format(**r) for r in rates])
    
    her.say(text)

def bitcoin(her, m):
    url = "https://api.bitcoinaverage.com/ticker/global/USD/"
    res = http.get(url).json()
    her.say(res["24h_avg"], "USD")

def cmds(her, m):
    for cmd in WORDS:
        her.write(cmd, "\n")

def google(her, m):
    url = "http://ajax.googleapis.com/ajax/services/search/web?v=1.0&q=" + " ".join(m.group(2))
    results = http.get(url).json()["responseData"]["results"]
    items = ["{titleNoFormatting} -- {unescapedUrl}".format(**r) for r in results]

    her.say("–í–æ—Ç —á—Ç–æ —è –Ω–∞—à–ª–∞:\n")
    her.write("\n".join(items))


def hn(her, m):
    url = "https://hacker-news.firebaseio.com/v0/topstories.json"
    top = http.get(url).json()

    top_stories = []
    for i in range(5):
        surl = "https://hacker-news.firebaseio.com/v0/item/%s.json" % top[i]
        story = http.get(surl).json()
        top_stories.append("{title} -- {url}".format(**story))
    her.say("–í–æ—Ç –¢–û–ü:\n")
    her.write("\n".join(top_stories))

def remind(her, m):
    task = m.group(1)
    her.say("–Ø –±—ã –Ω–∞–ø–æ–º–Ω–∏–ª–∞ —Ç–µ–±–µ '%s', –Ω–æ –ø–æ–∫–∞ –Ω–µ —É–º–µ—é" % task)

def summary(her, m):
    query = m.group(2)

    uname = ud.name(query[0])
    if "CYRILLIC" in uname:
        wikipedia.set_lang("ru")
    else:
        wikipedia.set_lang("en")

    res = wikipedia.summary(query, sentences=2)
    page = wikipedia.page(query)
    her.say("%s\n%s" % (res, page.url))


WORDS = {
    r"hi": "—Ö–∞—é—à–∫–∏!",
    r"–ø—Ä–∏–≤–µ—Ç": "–ü—Ä–∏–≤–µ—Ç!",
    r"–ø–æ–∫–∞|—á–º–æ–∫–∏": "–ü–æ–∫–∞ üòò|–î–∞–≤–∞–π, —É–≤–∏–¥–∏–º—Å—è!",
    r"–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç": "–Ø - –û–Ω–∞, –û–Ω–∞ - –Ø|–°–∫–∞—Ä–ª–µ—Ç –ô–æ—Ö–∞–Ω—Å–µ–Ω... —à—É—Ç–∫–∞",
    r"–∫–∞–∫ –¥–µ–ª–∞": "–¥–∞ –Ω–µ–ø–ª–æ—Ö–æ|–∫–∞–∫ —Å–∞–∂–∞ –±–µ–ª–∞|–¥–∞ –Ω–æ—Ä–º, —á–µ",
    r"–∑–∞–µ–±–∏—Å—å": "–∞ —Ç–æ!",

    r"–∫—É—Ä—Å|–ø–æ—á–µ–º|currency": currency,
    r"–∫–æ–º–∞–Ω–¥—ã": cmds,
    r"–±–∏—Ç–∫–æ–∏–Ω|bitcoin": bitcoin,
    r"—Å–º—ã—Å–ª –∂–∏–∑–Ω–∏": "42",
    r"(google|–ø–æ–≥—É–≥–ª–∏) (.*)": google,
    r"hn|–≤ —Ç—Ä–µ–Ω–¥–µ": hn,
    r"–Ω–∞–ø–æ–º–Ω–∏ (.*)": remind,
    r"(—á—Ç–æ —Ç–∞–∫–æ–µ|what is|define) (.*)": summary
}

class Her(object):
    def tell(self, phrase):
        self.buf = ""
        found = False

        phrase = phrase.lower()
        ntokens = re.sub(r"\.|,|\?|!", " ", phrase).split()
        nphrase = " ".join(ntokens)

        for word in WORDS:
            m = re.search(word, nphrase)
            if m:
                self.do(WORDS[word], m)
                found = True
                break

        if not found:
            self.say("–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é üò≥")

        return self.buf

    def write(self, *args):
        self.buf += " ".join(args)

    def say(self, *w):
        strs = map(str, w)
        self.write("–û–Ω–∞:", *strs)

    def do(self, a, tokens):
        if type(a) is str:
            variants = a.split("|")
            self.say(random.choice(variants))
        else:
            try:
                a(self, tokens)
            except Exception as e:
                raise e
                self.say("–í–æ—É-–≤–æ—É-–≤–æ—É, –ø–æ—Ç–∏—à–µ! –£ –º–µ–Ω—è –¥–∞–∂–µ —á—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å :/")

def main():
    her = Her()
    while True:
        try:
            phrase = input("–¢—ã: ")
        except EOFError:
            her.say("–ü–æ–∫–∞ üòò")
            break
        print(her.tell(phrase))


if __name__ == '__main__':
    main()